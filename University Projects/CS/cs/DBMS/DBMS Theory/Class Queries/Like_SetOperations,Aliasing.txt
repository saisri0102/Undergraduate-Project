select Fname from employee where ssn in ('888665555','123456','123456789');
SELECT dnumber FROM employee,department WHERE dnumber = dno +2;
SELECT fname,lname FROM employee WHERE dno BETWEEN 1 AND 10;
SELECT fname,lname FROM employee WHERE dno BETWEEN 2 AND 10;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

select * from employee where lname like '%mi%';
select * from employee where lname like '%_m%';
select * from employee where lname like '%_r%';

select Fname from employee where Fname ilike '__Me_';
select * from employee where Fname like '__med';
-----------------------------------------------------------------------------------
Query6:Show the resulting salaries if every employee working on the 'ProductX' project is given a 10 percent raise.

Q13: SELECT E.Fname, E.Lname, 1.1 * E.Salary 
FROM EMPLOYEE AS E, WORKS_ON AS W, PROJECT AS P
WHERE E.Ssn=W.Essn AND W.Pno=P.Pnumber AND
P.Pname='ProductX';

----------------------------------------------------------------------------
ORDER BY
--------
Query8:Retrieve a list of employees and the projects they are working on,
ordered by department and, within each department, ordered alphabetically by
last name, then first name.


Q8: SELECT D.Dname, E.Lname, E.Fname, P.Pname
FROM DEPARTMENT D, EMPLOYEE E, WORKS_ON W,PROJECT P
WHERE D.Dnumber= E.Dno AND E.Ssn= W.Essn AND
W.Pno= P.Pnumber
ORDER BY D.Dname, E.Lname, E.Fname;


***********************************************************************************
Query9:Retrieve the names of all employees who do not have supervisors.

Q9: SELECT Fname, Lname
    FROM EMPLOYEE
    WHERE Super_ssn IS NULL;

***********************************************************************************
select e.fname as ef,e.lname as el,s.fname as sf,s.lname as sl from employee e,employee S where e.super_ssn=s.ssn;
    ef    |   el    |    sf    |   sl
----------+---------+----------+---------
 Franklin | Wong    | James    | Borg
 Jennifer | Wallace | James    | Borg
 Joyce    | English | Franklin | Wong
 Ahmed    | Jabbar  | Jennifer | Wallace
 Ramesh   | Narayan | Franklin | Wong
 John     | Smith   | Franklin | Wong
 Alicia   | Zelaya  | Jennifer | Wallace

***********************************************************************************
SET OPERATIONS:
---------------

The results of two queries can be combined using the set operations union, intersection, and difference.
The syntax is
query1 UNION [ALL] query2
query1 INTERSECT [ALL] query2
query1 EXCEPT [ALL] query2
query1 and query2 are queries 

Set operations can also be nested and chained, for example
query1 UNION query2 UNION query3
which is executed as:
(query1 UNION query2) UNION query3

UNION effectively appends the result of query2 to the result of query1 (although there is no guarantee that this is the order in which the rows are actually returned). Furthermore, it eliminates duplicate rows from its result, in the same way as DISTINCT, unless UNION ALL is used.
INTERSECT returns all rows that are both in the result of query1 and in the result of query2. Duplicate rows are eliminated unless INTERSECT ALL is used.

EXCEPT returns all rows that are in the result of query1 but not in the result of query2. (This is sometimes called the difference between two queries.) Again, duplicates are eliminated unless EXCEPT ALL is used.
In order to calculate the union, intersection, or difference of two queries, the two queries must be “union compatible”, which means that they return the same number of columns and the corresponding columns have compatible data types,

