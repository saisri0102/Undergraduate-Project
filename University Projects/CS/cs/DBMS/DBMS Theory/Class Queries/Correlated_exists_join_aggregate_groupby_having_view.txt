select * from dependent where (essn,dependent_name)=('333445555','Alice');

Query:Select the employees who have salary more than that of 'James'

select fname, salary from employee where salary > (select salary from employee where fname='James');

-----------------------------------------------------------------------------------
CORRELATED NESTED QUERIES:
--------------------------- 
Query1: Retrieve the name of each employee who has a dependent with the
same first name and is the same gender as the employee.

select e.fname,e.lname from Employee E,Dependent D where D.Essn=E.ssn and E.gender=D.gender and D.dependent_name =E.fname;


USING CORRELATED NESTED:
------------------------

SELECT E.Fname, E.Lname
FROM EMPLOYEE AS E
WHERE E.Ssn IN ( SELECT Essn
FROM DEPENDENT AS D
WHERE E.Fname=D.Dependent_name
AND E.gender=D.gender );


------------------------------------------------------------------------------------------------------

Query2: Find the list of all employees(ssn,fname), whose salary is above average for their departments.

   SELECT ssn, fname
   FROM employee AS E
   WHERE salary > (
       SELECT AVG(salary)
       FROM employee
       WHERE dno = E.dno);



------------------------------------------------------------------------------------------------------
3)Select the entire list of employees alongside the average salary for each employee's department.

SELECT ssn,fname,
       (SELECT AVG(salary) 
        FROM employee
        WHERE dno = E.dno) AS department_average
FROM employee AS E;

-----------------------------------------------------------------------------------

EXISTS & NOT EXISTS:    // Used to check if the result of a correlated nested query is empty or not.
--------------------
EMPLOYEE-DEPENDENT Problem using EXISTS:
----------------------------------------

SELECT E.Fname, E.Lname
FROM EMPLOYEE AS E
WHERE EXISTS ( SELECT *
FROM DEPENDENT AS D
WHERE E.Ssn=D.Essn AND E.Gender=D.Gender
AND E.Fname=D.Dependent_name);





Query1:Retrieve the names of employees who have no dependents.

Q1: SELECT Fname, Lname
FROM EMPLOYEE
WHERE NOT EXISTS ( SELECT *
FROM DEPENDENT
WHERE Ssn=Essn );

-----------------------------------------------------------------------------------

Query2:List the names of managers who have at least one dependent.

Q2: SELECT Fname, Lname
FROM EMPLOYEE
WHERE EXISTS ( SELECT *
FROM DEPENDENT
WHERE Ssn=Essn )
AND
EXISTS ( SELECT *
FROM DEPARTMENT
WHERE Ssn=Mgr_ssn );

-----------------------------------------------------------------------------------

Query3:Retrieve the name of each employee who works on all the projects controlled by department number 4.

Q3: SELECT Fname, Lname
FROM EMPLOYEE
WHERE NOT EXISTS ( ( SELECT Pnumber
FROM PROJECT
WHERE Dnum=4)
EXCEPT ( SELECT Pno
FROM WORKS_ON
WHERE Ssn=Essn) );


_________________________________________________________________________________
Query4:Retrieve the name of each employee who works on all the projects controlled by the department in which he works.

SELECT Fname, Lname
FROM EMPLOYEE
WHERE NOT EXISTS ( ( SELECT Pnumber
FROM PROJECT
WHERE Dnum=employee.dno)
EXCEPT ( SELECT Pno
FROM WORKS_ON
WHERE Ssn=Essn) );


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

JOINED TABLES:
--------------

CROSS JOIN:
----------
select * from t1,t2;
select * from t1 cross join t2;
select * from t1 cross join t2 where t1.num=t2.num;

Qualified joins:
---------------
T1 { [INNER] | { LEFT | RIGHT | FULL } [OUTER] } JOIN T2 ON boolean_expression
T1 { [INNER] | { LEFT | RIGHT | FULL } [OUTER] } JOIN T2 USING ( join column list )
T1 NATURAL { [INNER] | { LEFT | RIGHT | FULL } [OUTER] } JOIN T2


INNER JOIN:
-----------
select * from t1 inner join t2 on true;
select * from t1 inner join t2 on t1.num=t2.num;

select t1.num as t1_num,t1.name as t1_name,t2.num as t2_num,t2.value as t2_value from t1 inner join t2 on t1.num=t2.num;
select * from t1 inner join t2 USING (num);
select * from t1 join t2 on t1.num=t2.num;

NATURAL JOIN:
-------------
select * from t1 natural inner join t2;
select * from t1 natural join t2;
select t1.num as t1_num,t1.name as t1_name,t2.num as t2_num,t2.value as t2_value from t1 natural inner join t2;

OUTER JOINS:
------------
LEFT OUTER JOIN:
----------------
select * from t1 left join t2 on t1.num=t2.num;
select * from t2 left join t1 on t1.num=t2.num;
select * from t2 left join t1 using (num);

select * from t1 natural left outer join t2;

RIGHT OUTER JOIN:
-----------------
select * from t1 right join t2 on t1.num=t2.num;
select * from t2 right join t1 on t1.num=t2.num;

select * from t1 natural right outer join t2;

FULL OUTER JOIN:
----------------
SELECT * FROM t1 FULL JOIN t2 ON t1.num = t2.num;
SELECT * FROM t1 NATURAL FULL JOIN t2 ON t1.num = t2.num;
_____________________________________________________

SELECT * FROM t1 LEFT JOIN t2 ON t1.num = t2.number AND t2.value = 'pp';
SELECT * FROM t1 LEFT JOIN t2 ON t1.num = t2.number WHERE t2.value = 'pp';



SELECT * FROM t1 JOIN t2 ON t1.num = t2.number AND t2.value = 'pp';
SELECT * FROM t1 JOIN t2 ON t1.num = t2.number where t2.value = 'pp';

Note:a restriction placed in the ON clause is processed before the join, while a restriction placed in the WHERE clause is processed after the join. That does not matter with inner joins, but it matters a lot with outer joins.

__________________________________________________________________________

COMPANY DB QUERIES:
-------------------

Query 1: For each employee, retrieve the employee’s first and last name and
the first and last name of his or her immediate supervisor.

Q1: SELECT E.Fname, E.Lname, S.Fname, S.Lname
FROM EMPLOYEE AS E, EMPLOYEE AS S
WHERE E.Super_ssn=S.Ssn;

USING JOIN:
-----------
INNER JOIN:
-----------
SELECT E.Fname, E.Lname, S.Fname, S.Lname FROM EMPLOYEE AS E inner join EMPLOYEE AS S on E.super_ssn=S .ssn;

LEFT OUTER JOIN:
----------------
SELECT E.Fname, E.Lname, S.Fname, S.Lname FROM EMPLOYEE AS E left outer join EMPLOYEE AS S on E.super_ssn=S .ssn;

SELECT E.Fname as emp_fname, E.Lname as emp_lname, S.Fname as super_fname, S.Lname as super_lname FROM EMPLOYEE AS E left outer join EMPLOYEE AS S on E.Super_ssn=S.Ssn;

------------------------------------------------------------------------------------------------------
Query 2: For every project located in ‘Stafford’, list the project number, the
controlling department number, and the department manager’s last name,
address, and birth date.
Q2: SELECT Pnumber, Dnum, Lname, Address, Bdate
FROM PROJECT , DEPARTMENT , EMPLOYEE
WHERE Dnum=Dnumber AND Mgr_ssn=Ssn AND
Plocation='Stafford';

Q2: SELECT Pnumber, Dnum, Lname, Address, Bdate
FROM ((PROJECT JOIN DEPARTMENT ON Dnum=Dnumber)
JOIN EMPLOYEE ON Mgr_ssn=Ssn)
WHERE Plocation='Stafford';
******************************************************************************************************
AGGREGATE FUNCTIONS:
---------------------

Retrieve the total number of employees in the company
(Q1) and the number of employees in the ‘Research’ department (Q2).
Q1: SELECT COUNT (*)
FROM EMPLOYEE;

Q2: SELECT COUNT (*) as res_count
FROM EMPLOYEE, DEPARTMENT
WHERE DNO=DNUMBER AND DNAME='Research';

Here the asterisk (*) refers to the rows (tuples), so COUNT (*) returns the number of rows in the result of the query.

-----------------------------------------------------------------------------------
Find the sum of the salaries of all employees, the maximum salary,
the minimum salary, and the average salary.
Q: SELECT SUM (Salary), MAX (Salary), MIN (Salary), AVG (Salary)
FROM EMPLOYEE;
-----------------------------------------------------------------------------------

Query : Find the sum of the salaries of all employees of the ‘Research’
department, as well as the maximum salary, the minimum salary, and the average
salary in this department.

Q: SELECT SUM (Salary), MAX (Salary), MIN (Salary), AVG (Salary)
FROM (EMPLOYEE JOIN DEPARTMENT ON Dno=Dnumber)
WHERE Dname='Research';

or

SELECT SUM (Salary), MAX (Salary), MIN (Salary), AVG (Salary)
FROM (EMPLOYEE JOIN DEPARTMENT ON Dno=Dnumber AND Dname='Research');


---------------------------------------------------------------------------------

We may also use the COUNT function to count values in a column rather than tuples, as in the next example.

Query 23. Count the number of distinct salary values in the database.
Q23: SELECT COUNT (DISTINCT Salary)
FROM EMPLOYEE;

--------------------------------------------------------------------------

Query to find nth highest salary.(In the below example n=2. ie,second highest salary.)

SELECT * FROM Employee Emp1
WHERE 1 = (SELECT COUNT(DISTINCT(Emp2.Salary))
FROM Employee Emp2
WHERE Emp2.Salary > Emp1.salary);

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

GROUP BY and HAVING:
--------------------
SELECT x FROM test1 GROUP BY x;
SELECT * FROM test1 GROUP BY x;  

Note: In select you can have the grouping attribute or any other attribute which has a single value associated with each group(Note: group by PK )

postgres=# select * from test1;   
 x | y
---+---
 a | 3
 c | 2
 b | 5
 a | 1
 a | 3
(5 rows)


postgres=# select x,y from test1 group by x,y;
 x | y
---+---
 a | 1
 b | 5
 c | 2
 a | 3
(4 rows)

SELECT x, sum(y) FROM test1 GROUP BY x HAVING sum(y) > 3;

SELECT x, sum(y) FROM test1 GROUP BY x HAVING x < 'c';
--------------------------------------------------------------------
Query : Find the number of employees in each department.
select count(*) from employee group by dno;   

select dno,count(*) from employee group by dno;
select super_ssn,count(*) from employee group by super_ssn;     

				//Separate group for tuples with null                                                      value in grouping attribute                                                       
-----------------------------------------------------------------------------------

Query 1: For each department, retrieve the department number, the number of employees in the department, and their average salary.
Q1: SELECT Dno, COUNT (*), AVG (Salary) FROM EMPLOYEE GROUP BY Dno;


// Using Correlated Nested Query:

select distinct(dno),(select avg(salary) from employee where dno=E.dno) from employee e;
-----------------------------------------------------------------------------------

Query 2: For each project, retrieve the project number, the project name, and the number of employees who work on that project.
Q2: SELECT Pnumber, Pname, COUNT (*) FROM PROJECT, WORKS_ON WHERE Pnumber=Pno GROUP BY Pnumber, Pname;
-----------------------------------------------------------------------------------
Query 3: For each project on which more than two employees work, retrieve the project number, the project name, and the number of employees who work on the project.
Q3: SELECT Pnumber, Pname, COUNT (*) FROM PROJECT, WORKS_ON WHERE Pnumber=Pno GROUP BY Pnumber, Pname HAVING COUNT (*) >= 2;


----------------------------------------------------------------------------
Query 4: For each project, retrieve the project number, the project name, and the number of employees from department 5 who work on the project.
Q4: SELECT Pnumber, Pname, COUNT (*) FROM PROJECT, WORKS_ON, EMPLOYEE WHERE Pnumber=Pno AND Ssn=Essn AND Dno=5 GROUP BY Pnumber, Pname;




----------------------------------------------------------------------------

Query 5. For each department that has more than one employee, retrieve the department number and the number of its employees who are making more than $20,000.

SELECT Dno, COUNT (*) FROM EMPLOYEE WHERE Salary>30000 AND Dno in ( SELECT Dno FROM EMPLOYEE GROUP BY Dno HAVING COUNT (*) > 1) GROUP BY Dno;

----------------------------------------------------------------------------
VIEW in SQL:
___________
V1: CREATE VIEW WORKS_ON1
AS SELECT Fname, Lname, Pname, Hours
FROM EMPLOYEE, PROJECT, WORKS_ON
WHERE Ssn=Essn AND Pno=Pnumber ;

V2: CREATE VIEW DEPT_INFO1(Dept_name, No_of_emps, Total_sal)
AS SELECT Dname, COUNT (*), SUM (Salary)
FROM DEPARTMENT, EMPLOYEE
WHERE Dnumber=Dno
GROUP BY Dname;

Query:Retrieve the last name and first name of all employees who work on the ‘ProductX’ project.

Q:SELECT Fname, Lname
FROM WORKS_ON1
WHERE Pname='ProductX';
_______________________________________________________________________

View Implementation:
--------------------
1. Query Modification:
----------------------
Modifying or transforming the view query (submitted by the user) into a query on
the underlying base tables.

SELECT Fname, Lname
FROM EMPLOYEE, PROJECT, WORKS_ON
WHERE Ssn=Essn AND Pno=Pnumber
AND Pname='ProductX';

2. View Materialization:
------------------------
Physically creating a temporary view table when the view is first queried and keeping that table on the assumption that other queries on the view will follow.

VIEW UPDATE:
------------
Update the Pname attribute of ‘John Smith’from ‘ProductX’ to ‘ProductY’. 

UV1: UPDATE WORKS_ON1
SET Pname = 'ProductY'
WHERE Lname='Smith' AND Fname='John'
AND Pname='ProductX';

The above update can be mapped to update on underlying base tables in two ways.

a) Correct mapping
b) Incorrect mapping

a) UPDATE WORKS_ON
SET Pno= (SELECT Pnumber
FROM PROJECT
WHERE Pname='ProductY' )
WHERE Essn IN ( SELECT Ssn
FROM EMPLOYEE
WHERE Lname='Smith' AND Fname='John' )
AND
Pno= (SELECT Pnumber
FROM PROJECT
WHERE Pname='ProductX' );


(b): UPDATE PROJECT SET Pname = 'ProductY'
WHERE Pname = 'ProductX';


Un-updatable Views:
---------------------
* A view with a single defining table is updatable if the view attributes contain
  the primary key of the base relation, as well as all attributes with the NOT
  NULL constraint that do not have default values specified.

* Views defined on multiple tables using joins are generally not updateable.

* Views defined using groups and aggregate functions are not updateable.


WITH CHECK OPTION: must be added to the definition of a view if the view is to be updated
-To allow check for updatability and to plan for an execution strategy


CREATE VIEW WORKS_ON1
AS SELECT Fname, Lname, Pname, Hours
FROM EMPLOYEE, PROJECT, WORKS_ON
WHERE Ssn=Essn AND Pno=Pnumber WITH CHECK OPTION;


___________________________________________________________________________________
